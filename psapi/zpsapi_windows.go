// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package psapi

import (
	"syscall"
	"unsafe"

	"github.com/mxplusb/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modpsapi = windows.NewLazySystemDLL("psapi.dll")

	procGetProcessMemoryInfo = modpsapi.NewProc("GetProcessMemoryInfo")
	procGetPerformanceInfo   = modpsapi.NewProc("GetPerformanceInfo")
)

func getProcessMemoryInfo(handle windows.Handle, memCounters *ProcessMemoryCounters, cb windows.Dword) (err error) {
	r1, _, e1 := syscall.Syscall(procGetProcessMemoryInfo.Addr(), 3, uintptr(handle), uintptr(unsafe.Pointer(memCounters)), uintptr(cb))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func getPerformanceInfo(perfInfo *PerformanceInformation, cb windows.Dword) (err error) {
	r1, _, e1 := syscall.Syscall(procGetPerformanceInfo.Addr(), 2, uintptr(unsafe.Pointer(perfInfo)), uintptr(cb), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
