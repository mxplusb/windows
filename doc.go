// The windows package is a best effort at making an idiomatic interface to Windows.
//
// There are a few Windows types that are explicitly not implemented due to conflicts with the built-ins for the runtime. It was easier to just leave those out specifically because that would involve what is essentially reinventing the wheel for a type alias with no benefit. Types are implemented where it makes sense, to give a more natural Windows feel, and are generally completely interchangeable with their Golang counterparts.
//
// While Go is strongly typed as C/C++ is, generally the function parameters and types are 1:1 for their Windows counterparts. While those familiar with Windows may just call DWORD, having to think about the types on the fly can be tiring, so the type aliases are designed to make it easier for you. For example, windows.Dword is the type alias of uint32 as Microsoft explicitly defines it as a 32-bit unsigned integer. For a type like LPVOID, no such type truly exists in Go, so that is aliased as an interface as it makes sense for the type to be unknown. Other types like VOID are left out as they are not the same as nil. Nil is much closer to NULL, but that is not defined here.
//
// When reviewing the godocs, the goal was to make the Go APIs as close to the Windows APIs as possible, allowing for the easiest possible interface. There are a few tradeoffs, as discussed in the project README, but for the most part, it should feel like you are writing Go code with a true Windows API experience. For example, with kernel32.dll, the function for calling your local user name is GetUserNameW() for Unicode support, but here it's implemented as kernel32.GetUserName(). Examples like this are for API consistency while maintaining the proper API interfaces and not having to deal with Go <-> C++ idiosyncrasies. You as a user should not have to worry about the proper type conversions, needing to figure out structure sizes, or ANSI vs Unicode; you should be able to call the desired APIs across this project and have API consistency.
package windows
