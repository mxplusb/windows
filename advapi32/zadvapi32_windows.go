// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package advapi32

import (
	"syscall"
	"unsafe"

	"github.com/mxplusb/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")

	procGetUserNameW = modadvapi32.NewProc("GetUserNameW")
)

func getUserName(lpbuffer *windows.LptStr, lpnSize *windows.LpdWord) (err error) {
	r1, _, e1 := syscall.Syscall(procGetUserNameW.Addr(), 2, uintptr(unsafe.Pointer(lpbuffer)), uintptr(unsafe.Pointer(lpnSize)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
